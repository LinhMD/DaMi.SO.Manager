@using System.Reflection
@using System.ComponentModel
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@typeparam TItem
@inject IStringLocalizer<ShareResource> L

<table class="table table-hover table-bordered table-responsive text-black">
    <thead>
        <tr class="text-black">
            @if (NavLabel is not null)
            {
                <th style="text-transform: none;">
                    <h6>@NavLabel</h6>
                </th>
            }
            @foreach (var fieldInfo in propertyInfos)
            {
                if (Attribute.GetCustomAttribute(fieldInfo, typeof(HiddenInputAttribute)) is null)
                {
                    var displayName = (Attribute.GetCustomAttribute(fieldInfo, typeof(DisplayNameAttribute)) as
                    DisplayNameAttribute)?.DisplayName ?? fieldInfo.Name;
                    <th style="text-transform: none;">
                        <h6>@L[displayName]</h6>
                    </th>
                }
            }
            @if (ActionLabel is not null)
            {
                <th style="text-transform: none;">
                    <h6>@ActionLabel</h6>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var model in Models)
        {
            <tr class="@(RowStyleClass is not null ? RowStyleClass(model) : "")">
                @if (NavKey is not null)
                {
                    <th>@NavKey(model)</th>
                }
                @foreach (var fieldInfo in propertyInfos)
                {
                    if (Attribute.GetCustomAttribute(fieldInfo, typeof(HiddenInputAttribute)) is null)
                    {
                        var value = fieldInfo.GetValue(model);
                        if (value is null)
                        {
                            <th></th>
                        }
                        else
                        {
                            if (fieldInfo.GetType().IsAssignableFrom(typeof(bool)))
                            {
                                if (((bool)value))
                                {
                                    <th>
                                        <input type="checkbox" checked disabled />
                                    </th>
                                }
                                else
                                {
                                    <th>
                                        <input type="checkbox" disabled />
                                    </th>
                                }
                            }
                            else
                            {
                                var dataType = (Attribute.GetCustomAttribute(fieldInfo, typeof(DataTypeAttribute)) as DataTypeAttribute);
                                if (dataType is not null)
                                {
                                    switch (dataType.DataType)
                                    {
                                        case DataType.Currency:
                                            <th class="currency">@value</th>
                                            break;
                                        case DataType.Date:
                                            <th class="date">
                                                <input id="OrderDate" data-provide="datepicker" disabled type="date" name="OrderDate"
                                                    value="@(((DateTime)value).ToString("yyyy-MM-dd"))" class="form-control">
                                            </th>
                                            break;
                                        default:
                                            <th>@value</th>
                                            break;
                                    }
                                }
                                else
                                {
                                    <th>@value</th>
                                }
                            }
                        }
                    }
                }
                @if (Action is not null)
                {
                    <th>@Action(model)</th>
                }
            </tr>
        }
    </tbody>
</table>

@code {

    [Parameter]
    public IEnumerable<TItem> Models { get; set; } = [];
    public PropertyInfo[] propertyInfos { get; init; } = typeof(TItem).GetProperties();
    [Parameter] public Func<TItem, string>? RowStyleClass { get; set; }
    [Parameter] public RenderFragment<TItem>? NavKey { get; set; }
    [Parameter] public RenderFragment? NavLabel { get; set; }
    [Parameter] public RenderFragment<TItem>? Action { get; set; }
    [Parameter] public RenderFragment? ActionLabel { get; set; }

}
