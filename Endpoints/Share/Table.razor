@using System.Reflection
@using System.ComponentModel
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@typeparam TItem
@inject IStringLocalizer<ShareResource> L
<div class="table-responsive">
    <table class="table nowrap compact order-column hover text-black" id='@TableId'>
        <thead>
            <tr class="text-black">
                @if (NavLabel is not null)
                {
                    <th style="text-transform: none;">
                        <h6>@NavLabel</h6>
                    </th>
                }
                @foreach (var fieldInfo in propertyInfos)
                {
                    if (Attribute.GetCustomAttribute(fieldInfo, typeof(HiddenInputAttribute)) is null)
                    {
                        var displayName = (Attribute.GetCustomAttribute(fieldInfo, typeof(DisplayNameAttribute)) as
                        DisplayNameAttribute)?.DisplayName ?? fieldInfo.Name;
                        <th style="text-transform: none;">
                            <h6>@L[displayName]</h6>
                        </th>
                    }
                }
                @if (ActionLabel is not null)
                {
                    <th style="text-transform: none; min-width: 50px;">
                        <h6>@ActionLabel</h6>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var model in Models)
            {
                <tr class="@(RowStyleColor is not null ? RowStyleColor(model) : "" )">
                    @if (NavKey is not null)
                    {
                        <td>@NavKey(model)</td>
                    }
                    @foreach (var fieldInfo in propertyInfos)
                    {
                        var value = fieldInfo.GetValue(model);
                        if (value is null)
                        {
                            <td></td>
                        }
                        else
                        {
                            try
                            {
                                var boolValue = (bool)value;
                                <td>
                                    <input onclick="return false;" type="checkbox" class="form-control form-control-sm"
                                        checked='@value'>
                                </td>
                            }
                            catch (Exception)
                            {
                                var dataType = (Attribute.GetCustomAttribute(fieldInfo, typeof(DataTypeAttribute)) as
                                DataTypeAttribute);
                                if (dataType is not null)
                                {
                                    switch (dataType.DataType)
                                    {
                                        case DataType.Currency:
                                            if (value.GetType() == typeof(decimal))
                                            {
                                                <td class="text-right">@(((decimal)value).ToString("N0", CultureInfo.CurrentCulture))</td>
                                            }
                                            else if (value.GetType() == typeof(double))
                                            {
                                                <td class="text-right">@(((double)value).ToString("N0", CultureInfo.CurrentCulture))</td>
                                            }
                                            break;
                                        case DataType.Date:
                                            <td class="date">
                                                @(((DateTime)value).ToString(CultureInfo.CurrentCulture))
                                            </td>
                                            break;
                                        default:
                                            <td>@value</td>
                                            break;
                                    }
                                }
                                else
                                {
                                    <td>@value</td>
                                }
                            }
                        }
                    }
                    @if (Action is not null)
                    {
                        <td class="px-0">@Action(model)</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<script>
    var sortOptions = { orderable: false };
    var sortAble = ['Số đơn hàng', 'Khách hàng', 'Trạng thái', 'NV triển khai', 'Kiểu đơn hàng']
    new DataTable('#@TableId', {
        order: false,
        columns: [...Array(+Number('@(propertyInfos.Count() + (NavLabel == null ? 0 : 1) + (ActionLabel == null ? 0 : 1))')).keys()].map(f => { return sortOptions; }),
        initComplete: function () {
            this.api()
                .columns()
                .every(function () {
                    let column = this;
                    let title = column.header().textContent;

                    if (sortAble.includes(title)) {
                        // Create input element
                        let input = document.createElement('input');
                        input.classList.add('form-control', 'px-0')
                        input.placeholder = title;
                        column.header().replaceChildren(input);
                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    }
                });
        }
    });
</script>
@code {
    [Parameter]
    public IEnumerable<TItem> Models { get; set; } = [];

    public IEnumerable<PropertyInfo> propertyInfos { get; init; } = typeof(TItem).GetProperties().Where(f =>
    Attribute.GetCustomAttribute(f, typeof(HiddenInputAttribute)) is null);

    [Parameter] public Func<TItem, string>? RowStyleColor { get; set; }
    [Parameter] public RenderFragment<TItem>? NavKey { get; set; }
    [Parameter] public RenderFragment? NavLabel { get; set; }
    [Parameter] public RenderFragment<TItem>? Action { get; set; }
    [Parameter] public RenderFragment? ActionLabel { get; set; }
    [Parameter] public string? TableId { get; set; }
}